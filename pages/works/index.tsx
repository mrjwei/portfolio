import {useState, useEffect} from 'react'
import Head from 'next/head'
import {GetStaticProps} from 'next'
import {WorkDataType} from '../../types';
import {getWorksData} from '../../lib/works'
import {getNumOfPages} from '../../lib/utils'
import {Layout} from '../../components/layout'
import {Header} from '../../components/header'
import {Main} from '../../components/main'
import {Card} from '../../components/card'
import {FilterButtons} from '../../components/filterButtons'
import {Pagination} from '../../components/pagination'
import {Footer} from '../../components/footer'

type Props = {
  worksData: WorkDataType[]
}

const FILTERVALUES = {
  ALL: "all",
  APPS: "app",
  LOGOS: "logo",
  ILLUSTRATIONS: "illustration",
}

const ITEMPERPAGE = 6

export default ({worksData}: Props) => {
  const initialNumOfPages = getNumOfPages(worksData.length, ITEMPERPAGE)
  const [filterValue, setFilterValue] = useState(FILTERVALUES.ALL)
  const [numOfPages, setNumOfPages] = useState(initialNumOfPages)

  useEffect(() => {
    const numOfWorks = filterValue === "all" ? worksData.length : worksData.filter(workData => workData.tags.includes(filterValue)).length

    const newNumOfPages = getNumOfPages(numOfWorks, ITEMPERPAGE)

    setNumOfPages(newNumOfPages)
  }, [filterValue])

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    const target = event.target as HTMLButtonElement
    const value = target.value
    setFilterValue(value)
  }

  const filters = [
    {
      label: "All",
      value: FILTERVALUES.ALL,
      isActive: filterValue === FILTERVALUES.ALL,
      handleClick
    },
    {
      label: "App",
      value: FILTERVALUES.APPS,
      isActive: filterValue === FILTERVALUES.APPS,
      handleClick
    },
    {
      label: "Logo",
      value: FILTERVALUES.LOGOS,
      isActive: filterValue === FILTERVALUES.LOGOS,
      handleClick
    },
    {
      label: "Illustration",
      value: FILTERVALUES.ILLUSTRATIONS,
      isActive: filterValue === FILTERVALUES.ILLUSTRATIONS,
      handleClick
    }
  ]

  return (
    <Layout>
      <Head>
        <title>Works: Jesse Wei</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/global-images/favicon.png" />
      </Head>
      <Header mode="light" />
      <Main className='bg-mute py-36'>
        <div className='container'>
          <h2 className='mb-8'>Works.</h2>
          <FilterButtons
            filters={filters}
            activeFilterValue={filterValue}
          />
          {filterValue === "all" ? (
            <div className='mt-16 lg:grid lg:grid-cols-3 lg:justify-items-stretch lg:gap-x-24 lg:gap-y-20'>
              {worksData.map((workData, index) => {
                return (
                  <Card
                    index={index}
                    itemData={workData}
                    wrapperClassName="w-full"
                    cardClassName="h-full"
                  />
                )
              })}
            </div>
          ) : (
            <div className='mt-16 lg:grid lg:grid-cols-3 lg:justify-items-stretch lg:gap-x-24 lg:gap-y-20'>
              {worksData.filter(workData => workData.tags.includes(filterValue)).map((workData, index) => {
                return (
                  <Card
                    index={index}
                    itemData={workData}
                    wrapperClassName="w-full"
                    cardClassName="h-full"
                  />
                )
              })}
            </div>
          )}
          <Pagination numOfPages={numOfPages} />
        </div>
      </Main>
      <Footer position="static" />
    </Layout>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const worksData = getWorksData()
  return {
    props: {
      worksData
    }
  }
}