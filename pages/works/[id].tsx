import Head from 'next/head'
import {Work, WorkDataType} from '../../types'
import {Layout} from '../../components/layout'
import {Header} from '../../components/header'
import {Article} from '../../components/article'
import {Sidebar} from '../../components/sidebar'
import {Footer} from '../../components/footer'
import { getEntryIds, getContentAndData, getEntriesData } from '../../lib/entries'
import { areSimilar } from '../../lib/utils'

type Props = {
  work: Work
  allWorksData: WorkDataType[]
  allWorkIds: string[]
}

const Work =  ({work, allWorksData, allWorkIds}: Props) => {
  // get similar works by check if a work share at least one tag with currently displayed one
  const allOtherItems = allWorksData.filter(workData => workData.id !== work.id)
  const similarWorksData = allOtherItems.filter(workData => areSimilar(workData.tags, work.tags))

  // get prev and next work
  const currentIndex = allWorkIds.indexOf(work.id)
  const prevWorkData = currentIndex === 0 ? null : allWorksData[currentIndex - 1]
  const nextWorkData = currentIndex === allWorkIds.length - 1 ? null : allWorksData[currentIndex + 1]

  return (
    <Layout className='bg-mute'>
      <Head>
        <title>{work.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/global-images/favicon.png" />
      </Head>
      <Header mode="light" />
      <div className='container py-36 lg:grid lg:grid-cols-3 lg:gap-16'>
        <Article
          entry={work}
          prevData={prevWorkData}
          nextData={nextWorkData}
        />
        <Sidebar entries={similarWorksData} />
      </div>
      <Footer position='static' />
    </Layout>
  )
}

export default Work

export const getStaticPaths = async () => {
  const paths = getEntryIds("works")
  return {
    paths,
    fallback: false
  }
}

export const getStaticProps = async ({params}: {params: {id: string}}) => {
  const work = await getContentAndData("works", params.id)
  const allWorksData = getEntriesData("works")
  const allWorkIds = getEntryIds("works").map(object => object.params.id)

  return {
    props: {
      work,
      allWorksData,
      allWorkIds
    }
  }
}